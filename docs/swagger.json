{
    "schemes": [
        "https",
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "# Manageing Customer API",
        "title": "ApiTest",
        "termsOfService": "http://www.servit.co.th/",
        "contact": {
            "name": "API Support",
            "url": "http://www.servit.co.th/support",
            "email": "limweb@hotmail.com"
        },
        "license": {
            "name": "The MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "paths": {
        "/": {
            "get": {
                "description": "Message for the service",
                "produces": [
                    "text/plain"
                ],
                "summary": "Message",
                "operationId": "Message",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                }
            }
        },
        "/api/v1/books": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all books",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "List Books",
                "operationId": "ListlastBooks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Book"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Create Book",
                "operationId": "CreateBook",
                "parameters": [
                    {
                        "description": "Book data to be created",
                        "name": "Book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookForCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/api/v1/books/:id": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete book by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Delete Book",
                "operationId": "DeleteBook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of book to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update book by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Update Book",
                "operationId": "UpdateBook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of book to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Book data to be updated",
                        "name": "Book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BookForUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/api/v1/books/by/:id": {
            "get": {
                "security": [
                    {
                        "Basic auth": []
                    }
                ],
                "description": "Get book by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Get Book",
                "operationId": "GetBook",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of book to be gotten",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/api/v1/customers": {
            "get": {
                "security": [
                    {
                        "OAuth2": []
                    }
                ],
                "description": "List all customers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "List Customers",
                "operationId": "ListCustomers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Customers"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create Customer",
                "operationId": "CreateCustomer",
                "parameters": [
                    {
                        "description": "Customer data to be created",
                        "name": "Customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerForCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/api/v1/customers/:id": {
            "get": {
                "security": [
                    {
                        "Basic auth": []
                    }
                ],
                "description": "Get customer by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get Customer",
                "operationId": "GetCustomer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of customer to be gotten",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete customer by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Delete Customer",
                "operationId": "DeleteCustomer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of customer to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update customer by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update Customer",
                "operationId": "UpdateCustomer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of customer to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer data to be updated",
                        "name": "Customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerForUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/api/v1/tests": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all tests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tests"
                ],
                "summary": "List Tests",
                "operationId": "ListlastTests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Test"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create new test",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tests"
                ],
                "summary": "Create Test",
                "operationId": "CreateTest",
                "parameters": [
                    {
                        "description": "Test data to be created",
                        "name": "Test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TestForCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/api/v1/tests/:id": {
            "get": {
                "security": [
                    {
                        "Basic auth": []
                    }
                ],
                "description": "Get test by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tests"
                ],
                "summary": "Get Test",
                "operationId": "GetTest",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of test to be gotten",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete test by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tests"
                ],
                "summary": "Delete Test",
                "operationId": "DeleteTest",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of test to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update test by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tests"
                ],
                "summary": "Update Test",
                "operationId": "UpdateTest",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of test to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test data to be updated",
                        "name": "Test",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TestForUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/emailverify": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all auths",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "List Auths",
                "operationId": "Emailverify",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Login"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "Health checking for the service",
                "produces": [
                    "text/plain"
                ],
                "summary": "Health Check",
                "operationId": "HealthCheckHandler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login with username/email  and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "Login Auths",
                "operationId": "Login",
                "parameters": [
                    {
                        "description": "Login info",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Ping for the service",
                "produces": [
                    "text/plain"
                ],
                "summary": "Ping",
                "operationId": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    }
                }
            }
        },
        "/refreshtoken": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all auths",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "List Auths",
                "operationId": "Refreshtoken",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Login"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "Register Auths",
                "operationId": "Register",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Login"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        },
        "/resetpass": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all auths",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auths"
                ],
                "summary": "List Auths",
                "operationId": "Resetpass",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Login"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseData"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Book author",
                    "type": "string",
                    "example": "Mr. Cccc Dddd"
                },
                "category": {
                    "description": "Book category",
                    "type": "string",
                    "example": "Sea"
                },
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "id": {
                    "description": "Book id",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Book name",
                    "type": "string",
                    "example": "Mr. Aaaa Bbbbb"
                },
                "uid": {
                    "description": "Model UUID",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                }
            }
        },
        "models.BookForCreate": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Book author",
                    "type": "string",
                    "example": "Mr. Cccc Dddd"
                },
                "category": {
                    "description": "Book category",
                    "type": "string",
                    "example": "Sea"
                },
                "name": {
                    "description": "Book name",
                    "type": "string",
                    "example": "Mr. Aaaa Bbbbb"
                }
            }
        },
        "models.BookForUpdate": {
            "type": "object",
            "properties": {
                "author": {
                    "description": "Book author",
                    "type": "string",
                    "example": "Mr. Cccc Dddd"
                },
                "category": {
                    "description": "Book category",
                    "type": "string",
                    "example": "Sea"
                },
                "name": {
                    "description": "Book name",
                    "type": "string",
                    "example": "Mr. Aaaa Bbbbb"
                }
            }
        },
        "models.Customer": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "username"
            ],
            "properties": {
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "email": {
                    "description": "Customer E-mail",
                    "type": "string",
                    "maxLength": 255,
                    "example": "choo@gmail.com"
                },
                "firstname": {
                    "description": "Customer Firstname",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Choopong"
                },
                "gender": {
                    "description": "Customer Gender",
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "id": {
                    "description": "Customer ID",
                    "type": "integer",
                    "example": 1
                },
                "lastname": {
                    "description": "Customer Lastname",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Choosamer"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "username": {
                    "description": "Customer Username",
                    "type": "string",
                    "maxLength": 255,
                    "example": "choo"
                }
            }
        },
        "models.CustomerForCreate": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "username"
            ],
            "properties": {
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "email": {
                    "description": "Customer E-mail",
                    "type": "string",
                    "maxLength": 255,
                    "example": "choo@gmail.com"
                },
                "firstname": {
                    "description": "Customer Firstname",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Choopong"
                },
                "gender": {
                    "description": "Customer Gender",
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "lastname": {
                    "description": "Customer Lastname",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Choosamer"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "username": {
                    "description": "Customer Username",
                    "type": "string",
                    "maxLength": 255,
                    "example": "choo"
                }
            }
        },
        "models.CustomerForUpdate": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname"
            ],
            "properties": {
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "email": {
                    "description": "Customer E-mail",
                    "type": "string",
                    "maxLength": 255,
                    "example": "choo@gmail.com"
                },
                "firstname": {
                    "description": "Customer Firstname",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Choopong"
                },
                "gender": {
                    "description": "Customer Gender",
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "lastname": {
                    "description": "Customer Lastname",
                    "type": "string",
                    "maxLength": 255,
                    "example": "Choosamer"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                }
            }
        },
        "models.Customers": {
            "type": "object",
            "properties": {
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Customer"
                    }
                }
            }
        },
        "models.Login": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Product": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "id": {
                    "description": "Product id",
                    "type": "string",
                    "example": "1"
                },
                "image": {
                    "description": "Product image",
                    "type": "string",
                    "example": "/aaa/bbb/aaa.jpg"
                },
                "name": {
                    "description": "Product name",
                    "type": "string",
                    "example": "Mr. Aaa Bbbb"
                },
                "price": {
                    "description": "Product price",
                    "type": "number",
                    "example": 500
                },
                "stock": {
                    "description": "Product stock",
                    "type": "integer",
                    "example": 1
                },
                "uid": {
                    "description": "Model UUID",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                }
            }
        },
        "models.Test": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "id": {
                    "description": "Test id",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Test name",
                    "type": "string"
                },
                "uid": {
                    "description": "Model UUID",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                }
            }
        },
        "models.TestForCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Test name",
                    "type": "string"
                }
            }
        },
        "models.TestForUpdate": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Test name",
                    "type": "string"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "change": {
                    "description": "Transaction Change",
                    "type": "number"
                },
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "id": {
                    "description": "Transaction ID",
                    "type": "integer"
                },
                "order_list": {
                    "description": "Transaction OrderList",
                    "type": "string"
                },
                "paid": {
                    "description": "Transaction Paid",
                    "type": "number"
                },
                "payment_detail": {
                    "description": "Transaction PaymentDetail",
                    "type": "string"
                },
                "payment_type": {
                    "description": "Transaction PaymentType",
                    "type": "string"
                },
                "staff_id": {
                    "description": "Transaction StaffID",
                    "type": "string"
                },
                "total": {
                    "description": "Transaction Total",
                    "type": "number"
                },
                "uid": {
                    "description": "Model UUID",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Model Created At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "email": {
                    "description": "User email",
                    "type": "string",
                    "example": "a@email.com"
                },
                "id": {
                    "description": "User id",
                    "type": "integer",
                    "example": 1
                },
                "level": {
                    "description": "User level",
                    "type": "integer",
                    "example": 99
                },
                "name": {
                    "description": "User password",
                    "type": "string",
                    "example": "Mr. A "
                },
                "password": {
                    "description": "User password",
                    "type": "string",
                    "example": "P@ssw0rd999"
                },
                "reftoken": {
                    "description": "User token",
                    "type": "string",
                    "example": "aaaaa.bbbbbb.cccccc"
                },
                "telephone": {
                    "description": "User telephone",
                    "type": "string",
                    "example": "0816477729"
                },
                "uid": {
                    "description": "Model UUID",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Model UPdated At",
                    "type": "string",
                    "example": "2021-02-02 11:11:11"
                },
                "username": {
                    "description": "User name",
                    "type": "string",
                    "example": "usera"
                }
            }
        },
        "utils.ResponseData": {
            "type": "object",
            "properties": {
                "Title": {
                    "description": "Response type",
                    "type": "string",
                    "example": "Success"
                },
                "msg": {
                    "type": "string"
                },
                "status": {
                    "description": "Response status",
                    "type": "integer"
                },
                "success": {
                    "description": "Response success",
                    "type": "boolean"
                },
                "type": {
                    "description": "Response type",
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}