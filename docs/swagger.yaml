definitions:
  models.Book:
    properties:
      author:
        description: Book author
        example: Mr. Cccc Dddd
        type: string
      category:
        description: Book category
        example: Sea
        type: string
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      id:
        description: Book id
        example: 1
        type: integer
      name:
        description: Book name
        example: Mr. Aaaa Bbbbb
        type: string
      uid:
        description: Model UUID
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
    type: object
  models.BookForCreate:
    properties:
      author:
        description: Book author
        example: Mr. Cccc Dddd
        type: string
      category:
        description: Book category
        example: Sea
        type: string
      name:
        description: Book name
        example: Mr. Aaaa Bbbbb
        type: string
    type: object
  models.BookForUpdate:
    properties:
      author:
        description: Book author
        example: Mr. Cccc Dddd
        type: string
      category:
        description: Book category
        example: Sea
        type: string
      name:
        description: Book name
        example: Mr. Aaaa Bbbbb
        type: string
    type: object
  models.Customer:
    properties:
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      email:
        description: Customer E-mail
        example: choo@gmail.com
        maxLength: 255
        type: string
      firstname:
        description: Customer Firstname
        example: Choopong
        maxLength: 255
        type: string
      gender:
        description: Customer Gender
        enum:
        - male
        - female
        example: male
        type: string
      id:
        description: Customer ID
        example: 1
        type: integer
      lastname:
        description: Customer Lastname
        example: Choosamer
        maxLength: 255
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
      username:
        description: Customer Username
        example: choo
        maxLength: 255
        type: string
    required:
    - email
    - firstname
    - lastname
    - username
    type: object
  models.CustomerForCreate:
    properties:
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      email:
        description: Customer E-mail
        example: choo@gmail.com
        maxLength: 255
        type: string
      firstname:
        description: Customer Firstname
        example: Choopong
        maxLength: 255
        type: string
      gender:
        description: Customer Gender
        enum:
        - male
        - female
        example: male
        type: string
      lastname:
        description: Customer Lastname
        example: Choosamer
        maxLength: 255
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
      username:
        description: Customer Username
        example: choo
        maxLength: 255
        type: string
    required:
    - email
    - firstname
    - lastname
    - username
    type: object
  models.CustomerForUpdate:
    properties:
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      email:
        description: Customer E-mail
        example: choo@gmail.com
        maxLength: 255
        type: string
      firstname:
        description: Customer Firstname
        example: Choopong
        maxLength: 255
        type: string
      gender:
        description: Customer Gender
        enum:
        - male
        - female
        example: male
        type: string
      lastname:
        description: Customer Lastname
        example: Choosamer
        maxLength: 255
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
    required:
    - email
    - firstname
    - lastname
    type: object
  models.Customers:
    properties:
      customers:
        items:
          $ref: '#/definitions/models.Customer'
        type: array
    type: object
  models.Product:
    properties:
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      id:
        description: Product id
        example: "1"
        type: string
      image:
        description: Product image
        example: /aaa/bbb/aaa.jpg
        type: string
      name:
        description: Product name
        example: Mr. Aaa Bbbb
        type: string
      price:
        description: Product price
        example: 500
        type: number
      stock:
        description: Product stock
        example: 1
        type: integer
      uid:
        description: Model UUID
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
    type: object
  models.Test:
    properties:
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      id:
        description: Test id
        example: 1
        type: integer
      name:
        description: Test name
        type: string
      uid:
        description: Model UUID
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
    type: object
  models.TestForCreate:
    properties:
      name:
        description: Test name
        type: string
    type: object
  models.TestForUpdate:
    properties:
      name:
        description: Test name
        type: string
    type: object
  models.Transaction:
    properties:
      change:
        description: Transaction Change
        type: number
      created_at:
        description: Model Created At
        example: "2021-02-02 11:11:11"
        type: string
      id:
        description: Transaction ID
        type: integer
      order_list:
        description: Transaction OrderList
        type: string
      paid:
        description: Transaction Paid
        type: number
      payment_detail:
        description: Transaction PaymentDetail
        type: string
      payment_type:
        description: Transaction PaymentType
        type: string
      staff_id:
        description: Transaction StaffID
        type: string
      total:
        description: Transaction Total
        type: number
      uid:
        description: Model UUID
        type: string
      updated_at:
        description: Model UPdated At
        example: "2021-02-02 11:11:11"
        type: string
    type: object
  utils.ResponseData:
    properties:
      Title:
        description: Response type
        example: Success
        type: string
      msg:
        type: string
      status:
        description: Response status
        type: integer
      success:
        description: Response success
        type: boolean
      type:
        description: Response type
        example: success
        type: string
    type: object
info:
  contact:
    email: limweb@hotmail.com
    name: API Support
    url: http://www.servit.co.th/support
  description: '# Manageing Customer API'
  license:
    name: The MIT License
    url: https://opensource.org/licenses/MIT
  termsOfService: http://www.servit.co.th/
  title: ApiTest
  version: "2.0"
paths:
  /api/v1/books:
    get:
      consumes:
      - application/json
      description: List all books
      operationId: ListlastBooks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Book'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: List Books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create new book
      operationId: CreateBook
      parameters:
      - description: Book data to be created
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/models.BookForCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Create Book
      tags:
      - books
  /api/v1/books/:id:
    delete:
      consumes:
      - application/json
      description: Delete book by id
      operationId: DeleteBook
      parameters:
      - description: id of book to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Delete Book
      tags:
      - books
    patch:
      consumes:
      - application/json
      description: Update book by id
      operationId: UpdateBook
      parameters:
      - description: id of book to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Book data to be updated
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/models.BookForUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Update Book
      tags:
      - books
  /api/v1/books/by/:id:
    get:
      consumes:
      - application/json
      description: Get book by id
      operationId: GetBook
      parameters:
      - description: id of book to be gotten
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Basic auth: []
      summary: Get Book
      tags:
      - books
  /api/v1/customers:
    get:
      consumes:
      - application/json
      description: List all customers
      operationId: ListCustomers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Customers'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - OAuth2: []
      summary: List Customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create new customer
      operationId: CreateCustomer
      parameters:
      - description: Customer data to be created
        in: body
        name: Customer
        required: true
        schema:
          $ref: '#/definitions/models.CustomerForCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Create Customer
      tags:
      - customers
  /api/v1/customers/:id:
    delete:
      consumes:
      - application/json
      description: Delete customer by id
      operationId: DeleteCustomer
      parameters:
      - description: id of customer to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Delete Customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Get customer by id
      operationId: GetCustomer
      parameters:
      - description: id of customer to be gotten
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Basic auth: []
      summary: Get Customer
      tags:
      - customers
    patch:
      consumes:
      - application/json
      description: Update customer by id
      operationId: UpdateCustomer
      parameters:
      - description: id of customer to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Customer data to be updated
        in: body
        name: Customer
        required: true
        schema:
          $ref: '#/definitions/models.CustomerForUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Update Customer
      tags:
      - customers
  /api/v1/tests:
    get:
      consumes:
      - application/json
      description: List all tests
      operationId: ListlastTests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Test'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: List Tests
      tags:
      - tests
    post:
      consumes:
      - application/json
      description: Create new test
      operationId: CreateTest
      parameters:
      - description: Test data to be created
        in: body
        name: Test
        required: true
        schema:
          $ref: '#/definitions/models.TestForCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Create Test
      tags:
      - tests
  /api/v1/tests/:id:
    delete:
      consumes:
      - application/json
      description: Delete test by id
      operationId: DeleteTest
      parameters:
      - description: id of test to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Delete Test
      tags:
      - tests
    get:
      consumes:
      - application/json
      description: Get test by id
      operationId: GetTest
      parameters:
      - description: id of test to be gotten
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - Basic auth: []
      summary: Get Test
      tags:
      - tests
    patch:
      consumes:
      - application/json
      description: Update test by id
      operationId: UpdateTest
      parameters:
      - description: id of test to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Test data to be updated
        in: body
        name: Test
        required: true
        schema:
          $ref: '#/definitions/models.TestForUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseData'
      security:
      - ApiKeyAuth: []
      summary: Update Test
      tags:
      - tests
  /healthcheck:
    get:
      description: Health checking for the service
      operationId: HealthCheckHandler
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
  /message:
    get:
      description: Message for the service
      operationId: Message
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
      summary: Message
  /ping:
    get:
      description: Ping for the service
      operationId: Ping
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Ping
schemes:
- https
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
